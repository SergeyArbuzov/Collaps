<?xml version="1.0" encoding="UTF-8"?>
<con:interface xsi:type="con:GraphQLService" id="8e221702-5bed-46cc-b00b-5bdbc73336bb" name="Graph" type="graphql" definitionUrl="http://rapis02.aqa.com.ru:4005/schema.graphqls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="8e221702-5bed-46cc-b00b-5bdbc73336bbfileName">Graph</con:setting>
  </con:settings>
  <con:definitionCache type="TEXT" rootPart="http://rapis02.aqa.com.ru:4005/schema.graphqls">
    <con:part>
      <con:url>http://rapis02.aqa.com.ru:4005/schema.graphqls</con:url>
      <con:content>ï»¿schema {
  query: RootQueryType
  mutation: Mutation
}

"""Format the input as using lodash lowerCase"""
directive @lowerCase on FIELD

"""Format the input as using lodash upperCase"""
directive @upperCase on FIELD

"""Format the input as using lodash trim"""
directive @trim on FIELD

"""Format the input as using lodash default"""
directive @default(
  """A default value for not filled field"""
  to: String
) on FIELD

"""Format the input as using lodash toLower"""
directive @toLower on FIELD

"""Format the input as using lodash toUpper"""
directive @toUpper on FIELD

"""Format the input as using lodash template"""
directive @template(
  """A template given by lodash module"""
  as: String!
) on FIELD

"""Format the phone value from resolving the field"""
directive @phone(
  """A phone format (NATIONAL, INTERNATIONAL, RFC3966)"""
  as: String
) on FIELD

type AdditionalInfo {
  made: String
  design: String
  warranty: String
  AnnualFailureRate: Float
}

union Auth = AuthByLogin | AuthByEmail

type AuthByEmail {
  email: String!
  password: String!
}

type AuthByLogin {
  username: String!
  password: String!
}

input AuthorInput {
  author: String
  content: String
}

type AuthorType {
  author: String
  content: String
}

type Book implements Searchable {
  author: String
  searchPreviewText: String
}

type Customer {
  id: String
  name: String
  email: String
  age: Int
  gender: gender
  status: Boolean
  products: [Product]
  faivoriteProduct: Product
  data: ExtraInfo
}

"""field 'genre' was added via extended definiton in script"""
type ExtendedBookType {
  Title: String
  Author: String
  genre: String
}

"""Date custom scalar type"""
scalar ExtraDate

type ExtraInfo {
  LicenseType: String
  Status: String
}

enum gender {
  MALE
  FEMALE
}

enum Markets {
  AMAZON
  ALIBABA
  ALIEXPRESS
  OZON
}

type Movie implements Searchable {
  director: String
  searchPreviewText: String
}

type Mutation {
  addCustomer(name: String!, email: String!, age: Int!): Customer
  editCustomer(id: String!, name: String, email: String, age: Int, gender: gender, extraData: ExtraDate): Customer
  addAuthor(input: AuthorInput): AuthorType
  addProduct(productID: Int!, productName: String!, quantity: Int!): Product
}

type Product {
  productID: Int
  productName: String
  quantity: Int
  info: AdditionalInfo
  availableIn: Markets
}

type RootQueryType {
  customer(id: String): Customer
  customers: [Customer]
  search(text: String!): [Searchable]
  getCurrentUser: Auth
  checkInputWithDerectives(value: String): String

  """This query just revert input"""
  verifyExtendedType(Title: String!, Author: String!, genre: String!): ExtendedBookType
}

interface Searchable {
  searchPreviewText: String
}

type User implements Searchable {
  username: String
  searchPreviewText: String
}</con:content>
      <con:type>https://graphql.org/specification</con:type>
    </con:part>
  </con:definitionCache>
  <con:endpoints>
    <con:endpoint>http://rapis02.aqa.com.ru:4005/graphql</con:endpoint>
  </con:endpoints>
</con:interface>
